{% set token_amount = 100000 %}
version: 2

settings:
  gas_price: "fast"
  services:
      pfs:
          url: "{{ pfs_with_fee }}"
  chain: any
  claims:
    enabled: true
    hub-node: 0
    additional-address-count: 100
    token_amount: {{ token_amount }}
    num_direct_channels: 99  # direct channels: (0, 1), (1, 2), (2, 3)

token:
  balance_fund: 10_000_000
  balance_min:   5_000_000
  reuse: true

nodes:
  count: 100
  raiden_version: local
  reuse_accounts: true
  restore_snapshot: true

  default_options:
    gas-price: fast
    environment-type: development
    routing-mode: pfs
    enable-monitoring: false
    default-settle-timeout: 40
    default-reveal-timeout: 10
    flat-fee:
      - "{{ transfer_token }}"
      - 0
    proportional-fee:
      - "{{ transfer_token }}"
      - 0
    proportional-imbalance-fee:
      - "{{ transfer_token }}"
      - 0
scenario:
  serial:
    tasks:
      - snapshot:
          # We use the snapshot feature to ensure clean node state on every run.
          # But since the channels are implicitly opened via the claims we don't actually need a
          # task in here which is the reason for the "dummy" wait task.
          tasks:
            - wait: 0
      - parallel:
          name: "Assert after channel openings"
          tasks:
            {% for i in range(99) %}
            - assert: {from: {{ i + 1 }}, to: {{ i }}, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            - assert: {from: {{ i }}, to: {{ i + 1 }}, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            {% endfor -%}
            {%- for i in range(1, 100) %}
            - assert: {from: {{ i }}, to: 0, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            - assert: {from: 0, to: {{ i }}, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            {% endfor %}
      - wait: 10
      - serial:
          name: "Transfers via HUB, serially"
          tasks:
            {% for i in range(1, 10) %}
            - transfer: {from: {{ 100 - i }}, to: {{ i }}, amount: 1}
            - transfer: {from: {{ i }}, to: {{ 100 - i }}, amount: 1}
            {% endfor %}
      - parallel:
          name: "Check balances after serial hub transfers"
          tasks:
            {% for i in range(99) %}
            - assert: {from: {{ i + 1 }}, to: {{ i }}, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            - assert: {from: {{ i }}, to: {{ i + 1 }}, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            {% endfor -%}
            {%- for i in range(1, 100) %}
            - assert: {from: {{ i }}, to: 0, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            - assert: {from: 0, to: {{ i }}, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            {% endfor %}
      - serial:
          name: "Transfers via HUB, batched"
          tasks:
            {% for j in range(2, 100, 7) %}
            - parallel:
                name: "Batch {{ j }} - {{ j + 6 }}, forwards"
                tasks:
                  {% for i in range(7) %}
                  - transfer: {from: {{ j + i }}, to: {{ [(j + 7 - i), 99]|min }}, amount: 1}
                  {% endfor %}
            {% endfor %}{% for j in range(2, 100, 7) %}
            - parallel:
                name: "Batch {{ j }} - {{ j + 6 }}, reverse"
                tasks:
                  {% for i in range(7) %}
                  - transfer: {from: {{ [(j + 7 - i), 99]|min }}, to: {{ j + i }}, amount: 1}
                  {% endfor %}
            {% endfor %}
      - parallel:
          name: "Check balances after batched hub transfers"
          tasks:
            {% for i in range(99) %}
            - assert: {from: {{ i + 1 }}, to: {{ i }}, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            - assert: {from: {{ i }}, to: {{ i + 1 }}, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            {% endfor -%}
            {%- for i in range(1, 100) %}
            - assert: {from: {{ i }}, to: 0, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            - assert: {from: 0, to: {{ i }}, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            {% endfor %}
      - serial:
          name: "Fully decentralized peer to peer transfers (5 batches of 980 each)"
          repeat: 5
          tasks:
            - parallel:
                name: "Batch of 980 transfers"
                repeat: 10
                tasks:
                  {% for i in range(1, 99, 2) %}
                  - transfer: {from: {{ i }}, to: {{ i + 1 }}, amount: 50 }
                  - transfer: {from: {{ i + 1 }}, to: {{ i }}, amount: 50 }
                  {% endfor %}
      - parallel:
          name: "Check balances after decentralized transfers"
          tasks:
            {% for i in range(1, 99) %}
            - assert: {from: {{ i + 1 }}, to: {{ i }}, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            - assert: {from: {{ i }}, to: {{ i + 1 }}, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            {% endfor -%}
            {%- for i in range(1, 100) %}
            - assert: {from: {{ i }}, to: 0, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            - assert: {from: 0, to: {{ i }}, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            {% endfor %}
      - parallel:
          name: "Decentralized peer to peer burning of tokens, forwards"
          tasks:
            {% for i in range(1, 99, 2) %}
            - burn: {from: {{ i }}, to: {{ i + 1 }}, total_burn: 60_000 }
            {% endfor %}
      - parallel:
          name: "Decentralized peer to peer burning of tokens, reverse"
          tasks:
            {% for i in range(1, 99, 2) %}
            - burn: {from: {{ i + 1 }}, to: {{ i }}, total_burn: 70_000 }
            {% endfor %}
      - parallel:
          name: "Check balances after decentralized burning"
          tasks:
            {% for i in range(1, 99, 2) %}
            - assert: {from: {{ i }}, to: {{ i + 1 }}, total_deposit: {{ token_amount }}, balance: 40_000, state: "opened"}
            - assert: {from: {{ i + 1 }}, to: {{ i }}, total_deposit: {{ token_amount }}, balance: 30_000, state: "opened"}
            {% endfor -%}
            {%- for i in range(1, 100) %}
            - assert: {from: {{ i }}, to: 0, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            - assert: {from: 0, to: {{ i }}, total_deposit: {{ token_amount }}, balance: {{ token_amount }}, state: "opened"}
            {% endfor %}
      - parallel:
          name: "Close some channels"
          tasks:
            {% for i in range(1, 99, 6) %}
            - close_channel: {from: {{ i }}, to: {{ i + 1 }}}
            - close_channel: {from: {{ i }}, to: 0}
            {% endfor %}
      - wait_blocks: 30  # 20 blocks settle timeout + buffer
